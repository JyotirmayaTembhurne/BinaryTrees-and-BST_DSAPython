# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        if not root:
            return None
        from operator import itemgetter
        queue = [([0, 0], root)]
        pair = {0: [(0, root.val)]}
        while queue:
            coord, current = queue.pop(0)
            row, col = coord[0], coord[1]
            if current.left:
                queue.append(([row + 1, col - 1], current.left))
                if col - 1 not in pair:
                    pair[col - 1] = [(row + 1, current.left.val)]
                else:
                    pair[col - 1].append((row + 1, current.left.val))
            if current.right:
                queue.append(([row + 1, col + 1], current.right))
                if col + 1 not in pair:
                    pair[col + 1] = [(row + 1, current.right.val)]
                else:
                    pair[col + 1].append((row + 1, current.right.val))
        for key, value in pair.items():
            pair[key] = sorted(value, key=itemgetter(0, 1))
        pair = sorted(pair.items())
        result = list()
        result = [[value[1] for value in item[1]] for item in pair]
        return result

        




        

        
