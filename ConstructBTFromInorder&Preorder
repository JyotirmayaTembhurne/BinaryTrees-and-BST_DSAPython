# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from typing import List, Optional

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        def BinaryTree(preorder, inorder):
            if not preorder or not inorder:
                return None
            root = TreeNode(preorder[0])
            left_subtree_size = inorder.index(preorder[0])
            root.left = BinaryTree(
                preorder[1 : left_subtree_size + 1], inorder[:left_subtree_size]
            )
            root.right = BinaryTree(
                preorder[left_subtree_size + 1 :], inorder[left_subtree_size + 1 :]
            )
            return root
        return BinaryTree(preorder,inorder) 



